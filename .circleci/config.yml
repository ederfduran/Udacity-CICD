version: 2.1

orbs:
  slack: circleci/slack@3.4.2

### It's a good practice to keep your commands at the top of the config file. In this project, you'll need at least 2 commands:

commands:
  destroy_environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: delete Frontend stack
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: delete backend stack
          when: on_fail
          command: aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert_migration:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            WAS_MIGRATED=$(curl -H "token: 768912b5-5c92-46aa-b355-373c449e2c91" --request GET https://api.memstash.io/values/"${CIRCLE_WORKFLOW_ID:0:7}_migrations")
            echo " Was Migrated = ${WAS_MIGRATED}"            
            if [[ $WAS_MIGRATED -eq 1 ]]; then
              echo "Start revert migrations"
              cd backend
              npm i
              npm run migration:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: cd frontend && npm i
      - run: cd frontend && npm run build
      - save_cache:
          paths:
            - "/frontend/node_modules"
          key: "frontend-npm-packages"

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: cd backend && npm i
      - run: cd backend && npm run build
      - save_cache:
          paths:
            - "/backend/node_modules"
          key: "backend-npm-packages"

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - "frontend-npm-packages"
      - run: cd frontend && npm i && npm run build && npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - "backend-npm-packages"
      - run: cd backend && npm i && npm run build && npm run test
      - slack/status:
          fail_only: true
          mentions: "Eder D"
          only_for_branches: master

  analyze-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - "frontend-npm-packages"
      - run: cd frontend && npm i && npm audit fix --audit-level=critical --force

  analyze-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - "backend-npm-packages"
      - run: cd backend && npm i && npm audit fix --audit-level=critical --force

  #  deploy-infrastructure:
  deploy_backend_infra:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: |
          aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - run:
          name: Get backend Server Ip
          command: |
            echo 'export MY_HOST=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --region us-west-1 --output text)' >> $BASH_ENV
            source $BASH_ENV
            echo $MY_HOST
            curl -H "Content-Type: text/plain" -H "token: 768912b5-5c92-46aa-b355-373c449e2c91" --request PUT --data "${MY_HOST}" https://api.memstash.io/values/backend_host

  deploy_frontend_infra:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Set API_URL
          command: |
            HOST=$(curl -H "token: 768912b5-5c92-46aa-b355-373c449e2c91" --request GET https://api.memstash.io/values/backend_host)
            echo 'export API_URL=${HOST}' >> $BASH_ENV
            source $BASH_ENV
            echo $API_URL
      - run:
          name: package frontend artifact
          command: |
            echo $API_URL
            curl -sL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt-get install -y nodejs
            cd frontend
            npm i && npm run build
      - run:
          name: Install aws cli
          command: |
            pip install awscli
            aws --version
      - run:
          name: deploy frontend infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Update Frontend files
          command: |
            cd frontend/dist
            aws s3 sync . s3://"udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --delete
      - destroy_environment
      - revert_migration

  configure-infrastructure:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["86:d2:7e:61:dc:36:52:3d:a6:8e:1b:94:5c:a5:19:9f"]
      - run:
          name: add host to inventory
          command: |
            cd .circleci/ansible
            HOST=$(curl -H "token: 768912b5-5c92-46aa-b355-373c449e2c91" --request GET https://api.memstash.io/values/backend_host)
            echo "" >> inventory
            echo "${HOST}" >> inventory
            cat inventory
      - run:
          name: Update ENV variables
          command: |
            echo "ENVIRONMENT=production" > backend/.env
            echo "NODE_ENV=production" >> backend/.env
            echo "TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS" >> backend/.env
            echo "TYPEORM_ENTITIES=$TYPEORM_ENTITIES" >> backend/.env
            echo "TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR" >> backend/.env
            echo "TYPEORM_CONNECTION=$TYPEORM_CONNECTION" >> backend/.env
            echo "TYPEORM_HOST=$TYPEORM_HOST" >> backend/.env
            echo "TYPEORM_PORT=$TYPEORM_PORT" >> backend/.env
            echo "TYPEORM_USERNAME=$TYPEORM_USERNAME" >> backend/.env
            echo "TYPEORM_PASSWORD=$TYPEORM_PASSWORD" >> backend/.env
            echo "TYPEORM_DATABASE=$TYPEORM_DATABASE" >> backend/.env
      - run:
          name: Install aws cli for commands
          command: |
            pip install awscli
            aws --version
      # - run:
      #     name: build and zip backend
      #     command: |
      #       echo $PWD
      #       sudo apt install zip
      #       curl -sL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
      #       sudo apt-get install -y nodejs
      #       cd backend && npm install && npm run build
      #       cd dist && cp ../package.json . && zip -rq dist.zip *
      #       mv dist.zip /home/circleci/project/.circleci/ansible/roles/configure-server/files
      - run:
          name: Install ansible
          command: |
            sudo pip install ansible
            sudo apt-get install openssh-client
            ansible --version
      - run:
          name: Configure Server
          command: |
            cd .circleci/ansible
            echo -e "[defaults]\nhost_key_checking = False\n" > ansible.cfg
            echo -e "[ssh_connection]\nscp_if_ssh = True" >> ansible.cfg
            cat ansible.cfg
            ansible-playbook -i inventory main.yml
      - destroy_environment
      - revert_migration

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Update ENV variables
          command: |
            echo "ENVIRONMENT=production" > backend/.env
            echo "NODE_ENV=production" >> backend/.env
            echo "TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS" >> backend/.env
            echo "TYPEORM_ENTITIES=$TYPEORM_ENTITIES" >> backend/.env
            echo "TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR" >> backend/.env
            echo "TYPEORM_CONNECTION=$TYPEORM_CONNECTION" >> backend/.env
            echo "TYPEORM_HOST=$TYPEORM_HOST" >> backend/.env
            echo "TYPEORM_PORT=$TYPEORM_PORT" >> backend/.env
            echo "TYPEORM_USERNAME=$TYPEORM_USERNAME" >> backend/.env
            echo "TYPEORM_PASSWORD=$TYPEORM_PASSWORD" >> backend/.env
            echo "TYPEORM_DATABASE=$TYPEORM_DATABASE" >> backend/.env
      - run:
          name: Run migrations
          command: |
            cd backend && npm install && npm run build
            npm run migrations > migrations.log
            cat migrations.log
      - run:
          name: Persist migrations status
          command: |
            cd backend
            if grep -q "has been executed successfully." migrations.log
            then
              curl -H "Content-Type: text/plain" -H "token: 768912b5-5c92-46aa-b355-373c449e2c91" --request PUT --data "1" https://api.memstash.io/values/"${CIRCLE_WORKFLOW_ID:0:7}_migrations"
              echo "${CIRCLE_WORKFLOW_ID:0:7}_migrations = 1"
            else
              curl -H "Content-Type: text/plain" -H "token: 768912b5-5c92-46aa-b355-373c449e2c91" --request PUT --data "0" https://api.memstash.io/values/"${CIRCLE_WORKFLOW_ID:0:7}_migrations"
              echo "${CIRCLE_WORKFLOW_ID:0:7}_migrations = 0"
            fi
      - destroy_environment

  smoke-test:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run: apk add --update curl
      - run: apk add aws-cli
      - run:
          name: Check backend health
          command: |
            HOST=$(curl -H "token: 768912b5-5c92-46aa-b355-373c449e2c91" --request GET https://api.memstash.io/values/backend_host)
            echo 'export API_URL=${HOST}' >> $BASH_ENV
            source $BASH_ENV
            echo $API_URL
            curl "http://${API_URL}:3030/api/status"
      - run:
          name: check frontend url
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-1.amazonaws.com/#/employees"
            if curl -s ${URL} | grep "Welcome" 
            then
              return 0
            else
              return 1
            fi
      - destroy_environment
      - revert_migration

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Deploy the backend infrastructure using cloudformation
          command: |
            OLD_WORKFLOW_ID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo Old workflow ID: "${OLD_WORKFLOW_ID}"

            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))

            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name udapeople-cloudfront \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople &

            if [[ "${STACKS[@]}" =~ "${OLD_WORKFLOW_ID}" ]] 
            then
              echo "Removing previous stack"
              aws s3 rm "s3://udapeople-${OLD_WORKFLOW_ID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OLD_WORKFLOW_ID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OLD_WORKFLOW_ID}"
            fi

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires:
      #       - build-frontend
      # - test-backend:
      #     requires:
      #       - build-backend
      # - analyze-frontend:
      #     requires:
      #       - test-frontend
      # - analyze-backend:
      #     requires:
      #       - test-backend
      - deploy_backend_infra
      - run-migrations:
          requires:
            - deploy_backend_infra
      - configure-infrastructure:
          requires:
            - deploy_backend_infra
      - deploy_frontend_infra:
          requires:
            - configure-infrastructure
      - smoke-test:
          requires:
            - deploy_frontend_infra
      - cloudfront-update:
          requires:
            - smoke-test
