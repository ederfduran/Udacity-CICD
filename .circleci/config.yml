version: 2.1

orbs:
  slack: circleci/slack@3.4.2

### It's a good practice to keep your commands at the top of the config file. In this project, you'll need at least 2 commands:

# commands:
#   destroy-environment:
#     description: Destroy backend and frontend cloudformation stacks given a workflow ID.
#     ...

#   revert-migration:
#     description: Revert the last migration if successfully run in the current workflow.
#     ...

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: cd frontend && npm i
      - run: cd frontend && npm run build
      - save_cache:
          paths:
            - "/frontend/node_modules"
          key: "frontend-npm-packages"

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: cd backend && npm i
      - run: cd backend && npm run build
      - save_cache:
          paths:
            - "/backend/node_modules"
          key: "backend-npm-packages"

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - "frontend-npm-packages"
      - run: cd frontend && npm i && npm run build && npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - "backend-npm-packages"
      - run: cd backend && npm i && npm run build && npm run test
      - slack/status:
          fail_only: true
          mentions: "Eder D"
          only_for_branches: master

  analyze-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - "frontend-npm-packages"
      - run: cd frontend && npm i && npm audit fix --audit-level=critical --force

  analyze-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - "backend-npm-packages"
      - run: cd backend && npm i && npm audit fix --audit-level=critical --force

  #  deploy-infrastructure:
  deploy_backend_infra:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: |
          aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - run:
          name: Get backend Server Ip
          command: |
            echo 'export MY_HOST=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --region us-west-1 --output text)' >> $BASH_ENV
            source $BASH_ENV
            echo $MY_HOST
            curl -H "Content-Type: text/plain" -H "token: 768912b5-5c92-46aa-b355-373c449e2c91" --request PUT --data "${MY_HOST}" https://api.memstash.io/values/backend_host

  # deploy_frontend_infra:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Save Old bucket
  #         command: |
  #           echo 'export MY_HOST=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --region us-west-1 -- --output text)' >> $BASH_ENV

  #     - run: |
  #         aws cloudformation deploy \
  #           --template-file .circleci/files/frontend.yml \
  #           --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #           --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
  #           --tags project=udapeople

#  configure-infrastructure:

#  run-migrations:

#  deploy-frontend:

#  deploy-backend:

#  smoke-test:

#  cloudfront-update:

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - analyze-frontend:
          requires:
            - test-frontend
      - analyze-backend:
          requires:
            - test-backend
      - deploy_backend_infra
